name: Build and run tests (Linux)

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master

jobs:
  build-linux:
    runs-on: ${{ matrix.os.id }}
    env:
      CC: ${{ matrix.compiler }}
      CXXSTD: ${{ matrix.cpp_std }}
    strategy:
      matrix:
        os:
          - { id: ubuntu-20.04, name: focal }
        compiler:
          - 'clang-12'
          - 'gcc-11'
        cpp_std:
          - 'c++11'
          - 'c++14'
          - 'c++17'
          - 'c++20'
        include:
          # Limit the older compilers to C++11 mode
          - os: { id: ubuntu-20.04, name: focal }
            compiler: 'clang-11'
            cpp_std: 'c++11'
          - os: { id: ubuntu-20.04, name: focal }
            compiler: 'gcc-10'
            cpp_std: 'c++11'
      fail-fast: false
    steps:
      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install gperf build-essential bison flex libreadline-dev gawk tcl-dev libffi-dev git graphviz xdot pkg-config python python3 libboost-system-dev libboost-python-dev libboost-filesystem-dev zlib1g-dev

      - name: Setup GCC
        if: startsWith(matrix.compiler, 'gcc')
        shell: bash
        run: |
          CXX=${CC/#gcc/g++}
          sudo apt-add-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install $CC $CXX
          echo "CXX=$CXX" >> $GITHUB_ENV
          echo "CXXFLAGS=-Wp,-D_GLIBCXX_ASSERTIONS" >> $GITHUB_ENV

      - name: Setup Clang
        if: startsWith(matrix.compiler, 'clang')
        shell: bash
        run: |
          wget https://apt.llvm.org/llvm-snapshot.gpg.key
          sudo apt-key add llvm-snapshot.gpg.key
          rm llvm-snapshot.gpg.key
          sudo apt-add-repository "deb https://apt.llvm.org/${{ matrix.os.name }}/ llvm-toolchain-${{ matrix.os.name }} main"
          sudo apt-get update
          CXX=${CC/#clang/clang++}
          sudo apt-get install $CC $CXX
          echo "CXX=$CXX" >> $GITHUB_ENV

      - name: Runtime environment
        shell: bash
        run: |
          echo "${{ github.workspace }}/.local/bin" >> $GITHUB_PATH
          echo "procs=$(nproc)" >> $GITHUB_ENV

      - name: Tool versions
        shell: bash
        run: |
          $CC --version
          $CXX --version

      - name: Checkout Yosys
        uses: actions/checkout@v4

      - name: Build yosys out-of-tree
        shell: bash
        run: |
          mkdir build
          cd build
          make -f ../Makefile config-${CC%%-*}
          make -f ../Makefile -j$procs CXXSTD=$CXXSTD CC=$CC CXX=$CC LD=$CC

      - name: Compress build
        shell: bash
        run: |
          cd build
          tar -cvf ../build.tar share/ yosys yosys-*

      - name: Store build artifact
        if: (matrix.cpp_std == 'c++11') && (matrix.compiler == 'gcc-11')
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.tar
          retention-days: 1

  test-linux:
    name: Run tests
    needs: build-linux
    runs-on: ${{ matrix.os }}
    env:
      CC: clang
    strategy:
      matrix:
        os: [ubuntu-20.04]
    steps:
      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install gperf build-essential bison flex libreadline-dev gawk tcl-dev libffi-dev git graphviz xdot pkg-config python3 libboost-system-dev libboost-python-dev libboost-filesystem-dev zlib1g-dev

      - name: Runtime environment
        shell: bash
        run: |
          echo "${{ github.workspace }}/.local/bin" >> $GITHUB_PATH
          echo "procs=$(nproc)" >> $GITHUB_ENV

      - name: Checkout Yosys
        uses: actions/checkout@v4

      - name: Get iverilog
        shell: bash
        run: |
          git clone https://github.com/steveicarus/iverilog.git
          cd iverilog
          git checkout 192b6aec96fde982e6ddcb28b346d5893aa8e874
          echo "IVERILOG_GIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Cache iverilog
        id: cache-iverilog
        uses: actions/cache@v4
        with:
          path: .local/
          key: ${{ matrix.os }}-${{ env.IVERILOG_GIT }}

      - name: Build iverilog
        if: steps.cache-iverilog.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/.local/
          cd iverilog
          autoconf
          CC=gcc CXX=g++ ./configure --prefix=${{ github.workspace }}/.local
          make -j$procs
          make install

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Uncompress build
        shell: bash
        run:
          tar -xvf build.tar

      - name: Run tests
        shell: bash
        run: |
          make -j$procs test TARGETS= EXTRA_TARGETS= CONFIG=$CC
